{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ZentraAPI"
		},
		"Zentra_Function_ls_functionKey": {
			"type": "secureString",
			"metadata": "Secure string for 'functionKey' of 'Zentra_Function_ls'"
		},
		"enviroweather_db_ls_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'enviroweather_db_ls'"
		},
		"zentra_blob_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'zentra_blob'"
		},
		"Zentra_Function_ls_properties_typeProperties_functionAppUrl": {
			"type": "string",
			"defaultValue": "https://zentra-api-read.azurewebsites.net"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/weather_station_poll')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get_stations",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "stations_table_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "get_station_data",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get_stations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get_stations').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "station_poll",
									"type": "AzureFunctionActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "APICall",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@{string(item())}",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "Zentra_Function_ls",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "raw_data_check",
									"description": "Check to see if raw_data.json exists.",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "station_poll",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "raw_data",
											"type": "DatasetReference",
											"parameters": {}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "JsonReadSettings"
										}
									}
								},
								{
									"name": "Check_metadata",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "raw_data_check",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('raw_data_check').output.Exists",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Copy raw data to raw_data table_copy",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "JsonSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "JsonReadSettings"
														}
													},
													"sink": {
														"type": "AzurePostgreSQLSink",
														"writeBatchSize": 1000000,
														"writeBatchTimeout": "00:30:00",
														"writeMethod": "CopyCommand"
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"mappings": [
															{
																"source": {
																	"path": "$['sn']"
																},
																"sink": {
																	"name": "sn"
																}
															},
															{
																"source": {
																	"path": "$['vendor']"
																},
																"sink": {
																	"name": "vendor",
																	"type": "String"
																}
															},
															{
																"source": {
																	"path": "$['poll_date']"
																},
																"sink": {
																	"name": "poll_date",
																	"type": "DateTime"
																}
															},
															{
																"source": {
																	"path": "$['data']"
																},
																"sink": {
																	"name": "data",
																	"type": "String"
																}
															}
														],
														"collectionReference": "",
														"mapComplexValuesToString": true
													}
												},
												"inputs": [
													{
														"referenceName": "raw_data",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "raw_data_table_ds",
														"type": "DatasetReference",
														"parameters": {}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-04T13:58:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/stations_table_ds')]",
				"[concat(variables('factoryId'), '/linkedServices/Zentra_Function_ls')]",
				"[concat(variables('factoryId'), '/datasets/raw_data')]",
				"[concat(variables('factoryId'), '/datasets/raw_data_table_ds')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/raw_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "zentra_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "raw_data.json",
						"container": "zentra"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/zentra_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/raw_data_table_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "enviroweather_db_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "public",
					"table": "raw_data"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/enviroweather_db_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stations_table_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "enviroweather_db_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "identifier",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "vendor",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "api_token",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "api_key",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "api_sec",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "api_provider",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "description",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "api_url",
						"type": "text",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "update_freq",
						"type": "integer",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": "station_info"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/enviroweather_db_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Zentra_Function_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "[parameters('Zentra_Function_ls_properties_typeProperties_functionAppUrl')]",
					"functionKey": {
						"type": "SecureString",
						"value": "[parameters('Zentra_Function_ls_functionKey')]"
					},
					"authentication": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/enviroweather_db_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Linked service to the enviroweather database.",
				"annotations": [],
				"type": "AzurePostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('enviroweather_db_ls_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/zentra_blob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('zentra_blob_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Timed trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "weather_station_poll",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2022-02-09T14:45:00",
						"endTime": "2022-02-09T15:05:00",
						"timeZone": "Eastern Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/weather_station_poll')]"
			]
		}
	]
}